---
globs: "**/config/database.py,**/models/*.py,**/db/**/*.py"
description: "Database configuration and migration patterns"
---

# Database Configuration Patterns

## Database Configuration Structure

### Centralized Settings Pattern

```python
# settings.py - Primary interface using Pydantic BaseSettings
class Settings(BaseSettings):
    @computed_field
    @property
    def database_url(self) -> str:
        db_config = load_database_config()
        return get_database_url(db_config)

    @property
    def database_engine(self):
        return engine  # Import from database.py

# database.py - Core SQLAlchemy logic
engine = create_database_engine()
SessionLocal = sessionmaker(bind=engine)
Base = declarative_base()
```

- **SOLID principle**: Settings acts as interface, database.py contains implementation

### Configuration Loading

```python
# Dynamic configuration with type casting
def create_database_engine():
    config = load_database_config()
    pool_size = int(config.get("pool", 5))  # Explicit casting
    timeout = int(config.get("timeout", 5000)) // 1000

    return create_engine(
        url,
        pool_size=pool_size,
        pool_timeout=timeout
    )
```

### Database YAML Structure

```yaml
# database.yml - Environment-specific with Jinja templating
default: &default
  adapter: postgresql
  encoding: unicode
  pool: "{{ DB_POOL | default(5) }}"
  timeout: "{{ DB_TIMEOUT | default(5000) }}"

development:
  <<: *default
  # URL takes precedence over individual components
  url: "{{ DATABASE_URL | default('') }}"
  database: "{{ DB_NAME | default('app_development') }}"
  username: "{{ DB_USERNAME | default('') }}"
  password: "{{ DB_PASSWORD | default('') }}"
  host: "{{ DB_HOST | default('localhost') }}"
  port: "{{ DB_PORT | default(5432) }}"
```

## SQLAlchemy Patterns

### Model Organization

```python
# models/user.py - One model per file (SRP)
from config.settings import settings
Base = settings.base

class Users(Base):
    __tablename__ = "users"
    # ... model definition

# models/__init__.py - Package exports
from .user import Users
from .todo import Todos
__all__ = ["Users", "Todos"]
```

### Connection Management

```python
# Explicit pool configuration from YAML
def create_database_engine():
    config = load_database_config()
    return create_engine(
        get_database_url(config),
        pool_size=int(config.get("pool", 5)),
        pool_timeout=int(config.get("timeout", 5000)) // 1000
    )

# Session factory with explicit settings
SessionLocal = sessionmaker(
    autocommit=False,  # Different from Rails auto-commit
    autoflush=False,
    bind=engine
)
```

## Migration Patterns

### Alembic Setup

```python
# db/env.py - Environment configuration
import models  # Auto-import all models
target_metadata = settings.base.metadata
config.set_main_option("sqlalchemy.url", settings.database_url)
```

### Migration Best Practices

```python
# Separate migrations - one table per file
# Migration 1: users table
def upgrade():
    op.create_table('users',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('email', sa.String(), nullable=True),
        # ... other columns
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('email')
    )

# Migration 2: todos table (depends on users)
def upgrade():
    op.create_table('todos',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('owner_id', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(['owner_id'], ['users.id']),
        sa.PrimaryKeyConstraint('id')
    )
```

### Migration Commands

```bash
# Generate migration
python migrate.py revision --autogenerate -m "Create users table"

# Apply migrations
python migrate.py upgrade head

# Rollback to specific revision
python migrate.py downgrade 9927cfa5c027

# Rollback one step
python migrate.py downgrade -1

# Check status
python migrate.py current
python migrate.py history --verbose
```
